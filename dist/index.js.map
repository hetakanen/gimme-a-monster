{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/data/color-options.json","src/data/eye-options.json","src/data/monster-options.json","src/data/mouth-options.json","src/data/shape-options.json","src/index.ts","src/monsterGenerator.ts","src/randomValueGenerator.ts"],"names":["f","exports","module","define","amd","window","global","self","this","gimmeAMonster","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","monsterGenerator_1","default","generate","options","complexity","colors","__importStar","shapes","mouths","eyes","monsters","randomValueGenerator_1","let","result","color","type","stringify","addEyes","addMouth","addShape","addColor","addType","eyeAmount","getRandomNumber","getRandomValue","mouth","shape","values","Math","floor","random","max"],"mappings":"CAAA,SAAAA,GAAA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,IAAA,mBAAAG,QAAAA,OAAAC,IAAAD,OAAA,GAAAH,IAAA,oBAAAK,OAAAA,OAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAAC,MAAAC,cAAAT,IAAA,CAAA,WAAA,OAAA,SAAAU,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAf,GAAA,IAAAY,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAC,EAAA,mBAAAC,SAAAA,QAAA,IAAAjB,GAAAgB,EAAA,OAAAA,EAAAD,GAAA,GAAA,GAAAG,EAAA,OAAAA,EAAAH,GAAA,GAAA,MAAAI,EAAA,IAAAC,MAAA,uBAAAL,EAAA,MAAAM,KAAA,mBAAAF,EAAAG,EAAAV,EAAAG,GAAA,CAAAd,QAAA,IAAAU,EAAAI,GAAA,GAAAQ,KAAAD,EAAArB,QAAA,SAAAS,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAY,EAAAA,EAAArB,QAAAS,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAd,QAAA,IAAA,IAAAiB,EAAA,mBAAAD,SAAAA,QAAAF,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAW,EAAA,CAAA,SAAAR,EAAAf,EAAAD,GCAAC,EAAAD,QAAA,CAAA,MAAA,OAAA,QAAA,SAAA,W,uBCAAC,EAAAD,QAAA,CAAA,aAAA,gB,uBCAAC,EAAAD,QAAA,CAAA,QAAA,Y,uBCAAC,EAAAD,QAAA,CAAA,OAAA,QAAA,OAAA,a,uBCAAC,EAAAD,QAAA,CAAA,QAAA,SAAA,S,qFCCA,MAAAyB,EAAAT,EAAA,sBAEAhB,EAAA0B,QAAe,IACN,EAAAD,EAAAE,UAASC,EAAQC,a,upBCJ1B,MAAAC,EAAAC,EAAAf,EAAA,8BACAgB,EAAAD,EAAAf,EAAA,8BACAiB,EAAAF,EAAAf,EAAA,8BACAkB,EAAAH,EAAAf,EAAA,4BACAmB,EAAAJ,EAAAf,EAAA,gCACAoB,EAAApB,EAAA,0BAGahB,EAAA2B,SAAW,CAACE,EAAyB,SAEhDQ,IAAIC,EAAmB,CACrBC,MAAO,GACPC,KAAM,GACNC,UAAW,IAgBb,MAXmB,SAAfZ,GACFa,EAAQJ,GAGS,SAAfT,GAAwC,WAAfA,IAC3Bc,EAASL,GACTM,EAASN,IAGXO,EAASP,GACTQ,EAAQR,GACDA,GAGT,MAAMI,EAAU,IACdJ,EAAOS,WAAY,EAAAX,EAAAY,iBAAgB,IACnCV,EAAOJ,MAAO,EAAAE,EAAAa,gBAAef,GAC7BI,EAAOG,WAAaH,EAAOS,UAAY,IAAMT,EAAOJ,KAAO,KAKvDS,EAAW,IACfL,EAAOY,OAAQ,EAAAd,EAAAa,gBAAehB,GAC9BK,EAAOG,WAAaH,EAAOY,MAAQ,KAI/BN,EAAW,IACfN,EAAOa,OAAQ,EAAAf,EAAAa,gBAAejB,GAC9BM,EAAOG,WAAaH,EAAOa,MAAQ,KAI/BN,EAAW,IACfP,EAAOC,OAAQ,EAAAH,EAAAa,gBAAenB,GAC9BQ,EAAOG,WAAaH,EAAOC,MAAQ,KAI/BO,EAAU,IACdR,EAAOE,MAAO,EAAAJ,EAAAa,gBAAed,GAC7BG,EAAOG,WAAaH,EAAOE,O,+SCxDhBxC,EAAAiD,eAAiB,GACrBG,EAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAO7B,SAOrCvB,EAAAgD,gBAAkB,GACtBK,KAAKC,MAAMD,KAAKE,SAAWC,gBRbpC","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports=[\"red\", \"blue\", \"green\", \"yellow\", \"purple\"]\n","module.exports=[\"round eyed\", \"square eyed\"]\n","module.exports=[\"alien\", \"monster\"]\n","module.exports=[\"tiny\", \"small\", \"huge\", \"enormous\"]\n","module.exports=[\"round\", \"square\", \"oval\"]\n","import { IOptions } from \"./types\";\nimport { generate } from \"./monsterGenerator\";\n\nexport default (options: IOptions) => {\n  return generate(options.complexity);\n};\n","import * as colors from \"./data/color-options.json\";\nimport * as shapes from \"./data/shape-options.json\";\nimport * as mouths from \"./data/mouth-options.json\";\nimport * as eyes from \"./data/eye-options.json\";\nimport * as monsters from \"./data/monster-options.json\";\nimport { getRandomValue, getRandomNumber } from \"./randomValueGenerator\";\nimport { Complexity, IHighMonster, IMediumMonster, IMonster } from \"./types\";\n\nexport const generate = (complexity: Complexity = \"low\") => {\n  // TODO typed Object would be easier to use if it is required to be in a String format it can be converted with some formatter function\n  let result: IMonster = {\n    color: \"\",\n    type: \"\",\n    stringify: \"\",\n  };\n\n  // TODO const complexityLevel = high (3), medium (2), low (1)\n  // if (complexityLevel >= 3), (complexityLevel >=2)\n  if (complexity === \"high\") {\n    addEyes(result as IHighMonster);\n  }\n\n  if (complexity === \"high\" || complexity === \"medium\") {\n    addMouth(result as IMediumMonster);\n    addShape(result as IMediumMonster);\n  }\n\n  addColor(result);\n  addType(result);\n  return result;\n};\n\nconst addEyes = (result: IHighMonster) => {\n  result.eyeAmount = getRandomNumber(10);\n  result.eyes = getRandomValue(eyes) as string;\n  result.stringify += result.eyeAmount + \" \" + result.eyes + \" \";\n  //appendFromHigh(result, 'eyeAmount', true);\n  //appendFromHigh(result, 'eyes', true);\n};\n\nconst addMouth = (result: IMediumMonster) => {\n  result.mouth = getRandomValue(mouths);\n  result.stringify += result.mouth + \" \";\n  //appendFromMedium(result, 'mouth', true);\n};\n\nconst addShape = (result: IMediumMonster) => {\n  result.shape = getRandomValue(shapes);\n  result.stringify += result.shape + \" \";\n  //appendFromMedium(result, 'shape', true);\n};\n\nconst addColor = (result: IMonster) => {\n  result.color = getRandomValue(colors);\n  result.stringify += result.color + \" \";\n  //appendFromSmall(result, 'color', true);\n};\n\nconst addType = (result: IMonster) => {\n  result.type = getRandomValue(monsters);\n  result.stringify += result.type;\n  //appendFromSmall(result, 'type');\n};\n\nconst appendFromSmall = (result: IMonster, fieldName: keyof IMonster, addSpace: boolean = false) => {\n  appendToStringify(result, result[fieldName], addSpace);\n}\n\nconst appendFromMedium = (result: IMediumMonster, fieldName: keyof IMediumMonster, addSpace: boolean = false) => {\n  appendToStringify(result, result[fieldName], addSpace);\n}\n\nconst appendFromHigh = (result: IHighMonster, fieldName: keyof IHighMonster, addSpace: boolean = false) => {\n  appendToStringify(result, result[fieldName] as string, addSpace);\n}\n\nconst appendToStringify = (result: IMonster, valutToAppend: string, addSpace: boolean) => {\n  result.stringify += addSpace\n    ? valutToAppend + ' '\n    : valutToAppend;\n}","/**\n * @param values\n * @returns Random value from @values using Math.random\n */\nexport const getRandomValue = (values: Array<any>) => {\n  return values[Math.floor(Math.random() * values.length)];\n};\n\n/**\n * @param max\n * @returns Get value between @max and 0\n */\nexport const getRandomNumber = (max: number) => {\n  return Math.floor(Math.random() * max);\n};\n"]}