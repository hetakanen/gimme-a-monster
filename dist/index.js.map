{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/data/color-options.json","src/data/eye-options.json","src/data/monster-options.json","src/data/mood-options.json","src/data/shape-options.json","src/data/size-options.json","src/index.ts","src/monsterGenerator.ts","src/randomValueGenerator.ts","src/stringFormatter.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","monsterGenerator_1","generateMonster","generate","options","color_options_json_1","__importDefault","size_options_json_1","shape_options_json_1","mood_options_json_1","eye_options_json_1","monster_options_json_1","randomValueGenerator_1","stringFormatter_1","complexity","casing","result","stringified","properties","size","getRandomValue","default","mood","eyes","shape","color","type","str","toString","format","arr","prop","props","push","join","values","Math","floor","random","getRandomNumber","max","min","charAt","toUpperCase","string","slice","toLocaleLowerCase"],"mappings":"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","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports=[\"red\", \"blue\", \"green\", \"yellow\", \"purple\"]\n","module.exports=[\"round-eyed\", \"square-eyed\", \"googly-eyed\"]\n","module.exports=[\"alien\", \"monster\"]\n","module.exports=[\"smiling\", \"grinning\", \"pouting\", \"screaming\"]\r\n","module.exports=[\"round\", \"square\", \"oval\"]\n","module.exports=[\"tiny\", \"small\", \"huge\", \"enormous\"]\n","import { IOptions } from \"./types\";\nimport { generate } from \"./monsterGenerator\";\n\nexport const generateMonster = (options: IOptions) => {\n  return generate(options);\n};\n","import colors from \"./data/color-options.json\";\nimport sizes from \"./data/size-options.json\";\nimport shapes from \"./data/shape-options.json\";\nimport mood from \"./data/mood-options.json\";\nimport eyes from \"./data/eye-options.json\";\nimport monsters from \"./data/monster-options.json\";\nimport { getRandomValue } from \"./randomValueGenerator\";\nimport { IMonster, IMonsterProps, IOptions } from \"./types\";\nimport { format } from \"./stringFormatter\";\n\nexport const generate = (options: IOptions) => {\n  const { complexity, casing } = options;\n\n  const result: IMonster = {\n    stringified: \"\",\n    properties: {},\n  };\n\n  if (complexity === \"high\") {\n    result.properties.size = getRandomValue(sizes);\n    result.properties.mood = getRandomValue(mood);\n  }\n\n  if (complexity === \"high\" || complexity === \"medium\") {\n    result.properties.eyes = getRandomValue(eyes);\n    result.properties.shape = getRandomValue(shapes);\n  }\n\n  result.properties.color = getRandomValue(colors);\n  result.properties.type = getRandomValue(monsters);\n\n  const str = toString(result.properties);\n  result.stringified = format(str, casing);\n  return result;\n};\n\n/**\n * Loop through monster properties and add values to string with spaces\n * Trim the space at the end\n * @param props\n * @returns string of properties with spaces between values\n */\nconst toString = (props: IMonsterProps) => {\n  const arr = [];\n  for (const prop in props) {\n    arr.push(props[prop as keyof IMonsterProps]);\n  }\n\n  return arr.join(\" \");\n};\n","/**\n * @param values\n * @returns Random value from @values using Math.random\n */\nexport const getRandomValue = (values: Array<string>) => {\n  return values[Math.floor(Math.random() * values.length)];\n};\n\n/**\n * @param max\n * @param min\n * @returns Get value between @max and @min\n */\nexport const getRandomNumber = (max: number, min: number = 0) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n","import { Casing } from \"./types\";\n\nconst capitalize = (string: string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nexport const format = (str: string, casing?: Casing) => {\n  switch (casing) {\n    case \"capitalize\":\n      return capitalize(str);\n    case \"upper\":\n      return str.toUpperCase();\n    case \"lower\":\n      return str.toLocaleLowerCase();\n    default:\n      return str;\n  }\n};\n"]}